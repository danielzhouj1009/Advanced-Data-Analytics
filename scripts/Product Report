/* 
===================================================================================
Product Report
===================================================================================
Purpose:
- This report consolidate key product metrics and behaviors.

Highlights:
	1. Gathers essential fields such as product name, category, subcategory and cost.
	2. Segments producits by revenue to identify high-performers, mid-range, or low-performers. 
	3. Aggregate product_level metrics:
	-total orders
	-total sales
	-total quantity sold
	-total customers (unique)
	-lifespan (in months)
	4. Calculates valuable KPIs: 
	-recency (months since last sale)
	-average order revenue (AOR)
	-average monthly revenue 
===================================================================================
*/

CREATE VIEW gold.report_products AS
/*---------------------------------------------------------------------------------
1) Base Query: Retrives core columns from fact_sales and dim_products
-----------------------------------------------------------------------------------*/
WITH base_query AS (
SELECT 
	f.order_number,
	f.product_key,
	F.customer_key,
	f.order_date,
	f.sales_amount,
	f.quantity,
	p.product_name,
	p.category,
	p.subcategory,
	p.cost
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
WHERE f.order_date IS NOT NULL
)

, product_aggregation AS(
/*---------------------------------------------------------------------------------
2) Product Aggregation: Summarize key metrics at the prodcut level
-----------------------------------------------------------------------------------*/
SELECT 
	product_key,
	product_name,
	category,
	subcategory,
	cost,
	COUNT(DISTINCT order_number) AS total_orders,
	SUM(sales_amount) AS total_sales,
	SUM(quantity) AS total_quantity,
	COUNT(DISTINCT customer_key) AS total_customers,
	MAX(order_date) AS last_sale_date,
	DATEDIFF(month, MIN(order_date), MAX(order_date)) AS lifespan,
	ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity,0)),1) AS avg_selling_price 
FROM base_query
GROUP BY 
	product_key,
	product_name,
	category,
	subcategory,
	cost
	)

/*---------------------------------------------------------------------------------
3) Final Query:Combine all product results into one output
-----------------------------------------------------------------------------------*/
SELECT 
	product_key,
	product_name,
	category,
	subcategory,
	cost,
	last_sale_date,
	total_orders,
	total_sales,
	CASE WHEN total_sales > 50000 THEN 'High-Performer'
		 WHEN total_sales BETWEEN 10000 AND 50000 THEN 'Mid-Range'
		 ELSE 'Low-Performer'
	END AS product_segment,
	total_quantity,
	total_customers,
	lifespan,
	DATEDIFF(month, last_sale_date, GETDATE()) AS recency,
	--average order revenue (AOR)
	CASE WHEN total_orders = 0  THEN 0
		 ELSE total_sales / total_orders
	END AS avg_order_revenue,
	--average monthly revenue
	CASE WHEN lifespan = 0  THEN total_sales
		 ELSE total_sales / lifespan
	END AS avg_monthly_revenue
FROM product_aggregation
