-- >> Change over time
YEAR(order_date) AS order_year,
MONTH(order_date) AS order_year,
SUM(sales_amount) AS total_sales,
COUNT(DISTINCT customer_key) AS total_customers,
SUM(quantity) AS total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY YEAR(order_date), MONTH(order_date)
ORDER BY YEAR(order_date), MONTH(order_date)


SELECT 
DATETRUNC(month, order_date) AS order_date,
SUM(sales_amount) AS total_sales,
COUNT(DISTINCT customer_key) AS total_customers,
SUM(quantity) AS total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(month, order_date)
ORDER BY DATETRUNC(month, order_date)


SELECT 
FORMAT(order_date, 'yyyy- MMM') AS order_date,
SUM(sales_amount) AS total_sales,
COUNT(DISTINCT customer_key) AS total_customers,
SUM(quantity) AS total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY FORMAT(order_date, 'yyyy- MMM')
ORDER BY FORMAT(order_date, 'yyyy- MMM')


-->> cumulative analysis
-- total sales per month
-- running total of sales over time
SELECT 
order_date, 
total_sales,
SUM(total_sales) OVER (PARTITION BY YEAR(order_date) ORDER BY order_date) AS running_total_sales
-- window function
FROM
(
SELECT
DATETRUNC(month, order_date) AS order_date,
SUM(sales_amount) AS total_sales
FROM  gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(month, order_date)
) t


SELECT 
order_date, 
total_sales,
SUM(total_sales) OVER (ORDER BY order_date) AS running_total_sales,
AVG(avg_price) OVER (ORDER BY order_date) AS moving_average_price
-- window function
FROM
(
SELECT
DATETRUNC(year, order_date) AS order_date,
SUM(sales_amount) AS total_sales,
AVG(price) AS avg_price
FROM  gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(YEAR, order_date)
) t

-->> Performance Analysis (difference between current measure and tartet measure)
--Analyze the yearly performance of products by compring their sales to both the average sales preformance of the prodcut and the previous year's sales
WITH yearly_prodcut_sales AS(
SELECT 
	YEAR(f.order_date) AS order_year,
	p.product_name,
	SUM(f.sales_amount) as current_sales
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
WHERE order_date IS NOT NULL
GROUP BY 
YEAR(f.order_date),
p.product_name
) 

SELECT
order_year,
product_name,
current_sales,
AVG(current_sales) OVER (PARTITION BY product_name) AS avg_sales,
current_sales - AVG(current_sales) OVER (PARTITION BY product_name) AS diff_avg,
CASE WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) > 0  THEN 'Above Avg'
	 WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) < 0  THEN 'Below Avg'
	 ELSE 'Avg'
END AS avg_change,
LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS py_sales,
current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS diff_py,
CASE WHEN current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) > 0  THEN 'Increase'
     WHEN current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) < 0  THEN 'Decrease'
	 ELSE 'No Change'
END AS py_change
FROM yearly_prodcut_sales
ORDER BY product_name, order_year

-- >> Part to whole (propotional)
-- which categories contribute the most to overall sales?
WITH category_sales AS (
SELECT 
category, 
SUM(sales_amount) AS total_sales
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p
ON f.product_key = p.product_key
GROUP BY category
)

SELECT 
category, 
total_sales,
SUM(total_sales) OVER () AS overall_sales,
CONCAT (ROUND((CAST(total_sales AS FLOAT) / SUM(total_sales) OVER ())*100, 2), '%')  AS percentage_of_total
FROM category_sales
ORDER BY total_sales DESC


-->> Data Segmentation
-- Segment products into cost ranges and count how many products fall into each segment
WITH product_segments AS (
SELECT 
product_key,
product_name,
cost,
CASE WHEN cost<100 THEN 'Below 100'
	 WHEN cost BETWEEN 100 AND 500 THEN '100-500'
	 WHEN cost BETWEEN 500 AND 1000 THEN '500-1000'
	 ELSE 'Above 1000'
END  cost_range
FROM gold.dim_products
)
SELECT 
cost_range,
COUNT (product_key) AS total_products
FROM product_segments
GROUP BY cost_range
ORDER BY total_products DESC

/* Group customers into three segments based on their spending behavior:
	- VIP: Customers with at least 12 months of history ad spending more than 5000
	- Regular: Customers with at least 12 months of history but spending 5000 or less 
	- New: Customers with a lifespan less than 12 months
AND find the total number of customers by each gorup */
WITH customer_spending AS (
SELECT 
c.customer_key,
SUM(f.sales_amount)  total_spending,
MIN(order_date) first_order,
MAX(order_date) last_order,
DATEDIFF(month, MIN(order_date), MAX(order_date)) life_span
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key
)

SELECT 
customer_segment,
COUNT(customer_key) total_customers
FROM(
	SELECT
	customer_key,
	CASE WHEN life_span >= 12 AND total_spending > 5000 THEN 'VIP'
		 WHEN life_span >= 12 AND total_spending <= 5000 THEN 'Regular'
		 ELSE 'New'
	END  customer_segment
	FROM customer_spending) t
GROUP BY customer_segment
ORDER BY total_customers


